// Code generated by hertz generator.

package student

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/pkg/connpool"
	"student/hz/biz/model/student"
	student2 "student/kitex/kitex_gen/student"
	"student/kitex/kitex_gen/student/studentservice"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @router /add-student-info [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var opts []client.Option
	var err error
	var req student2.Student
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	opts = append(opts, client.WithHostPorts("127.0.0.1:8848"))
	opts = append(opts, client.WithLongConnection(connpool.IdleConfig{MinIdlePerAddress: 10,
		MaxIdlePerAddress: 1000}))

	client := studentservice.MustNewClient("StudentService", opts...)
	resp, err := client.Register(ctx, &req)
	//resp := new(student.RegisterResp)

	c.JSON(consts.StatusOK, resp)
}

// Query .
// @router /query [GET]
func Query(ctx context.Context, c *app.RequestContext) {
	var opts []client.Option
	var err error
	var req student.QueryReq

	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// TODO:调用kitex相关服务
	opts = append(opts, client.WithHostPorts("127.0.0.1:8848"))
	opts = append(opts, client.WithLongConnection(connpool.IdleConfig{MinIdlePerAddress: 10,
		MaxIdlePerAddress: 1000}))
	client := studentservice.MustNewClient("StudentService", opts...)
	kreq := student2.QueryReq{req.ID}
	resp, err := client.Query(ctx, &kreq)

	//resp := new(student.Student)
	if err != nil {
		c.JSON(consts.StatusOK, utils.H{"Message": err.Error()})
		return
	}

	c.JSON(consts.StatusOK, utils.H{
		"id":      resp.Id,
		"name":    resp.Name,
		"college": resp.College,
	})
}

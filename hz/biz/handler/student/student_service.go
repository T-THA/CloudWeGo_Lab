// Code generated by hertz generator.

package student

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/adaptor"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/connpool"
	"github.com/cloudwego/kitex/pkg/generic"
	"student/hz/biz/model/student"
	student2 "student/kitex/kitex_gen/student"
)

// Register .
// @router /add-student-info [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var opts []client.Option
	var err error
	var req student2.Student
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	opts = append(opts, client.WithHostPorts("127.0.0.1:8848"))
	opts = append(opts, client.WithLongConnection(connpool.IdleConfig{MinIdlePerAddress: 10,
		MaxIdlePerAddress: 1000}))

	p, err := generic.NewThriftFileProvider("../student.thrift")
	if err != nil {
		c.JSON(consts.StatusOK, utils.H{"Message": err.Error()})
	}
	g, err := generic.HTTPThriftGeneric(p)
	if err != nil {
		c.JSON(consts.StatusOK, utils.H{"Message": err.Error()})
	}
	client, err := genericclient.NewClient("StudentService", g, opts...)
	x := c.GetRequest()
	y, _ := adaptor.GetCompatRequest(x)
	z, _ := generic.FromHTTPRequest(y)
	resp, err := client.GenericCall(ctx, "", z)
	//client := studentservice.MustNewClient("StudentService", opts...)
	//resp, err := client.Register(ctx, &req)
	response := resp.(*generic.HTTPResponse)
	c.JSON(consts.StatusOK, response.Body)
}

// Query .
// @router /query [GET]
func Query(ctx context.Context, c *app.RequestContext) {
	var opts []client.Option
	var err error
	var req student.QueryReq

	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// TODO:调用kitex相关服务
	opts = append(opts, client.WithHostPorts("127.0.0.1:8848"))
	opts = append(opts, client.WithLongConnection(connpool.IdleConfig{MinIdlePerAddress: 10,
		MaxIdlePerAddress: 1000}))

	p, err := generic.NewThriftFileProvider("../student.thrift")
	if err != nil {
		c.JSON(consts.StatusOK, utils.H{"Message": err.Error()})
	}
	g, err := generic.HTTPThriftGeneric(p)
	if err != nil {
		c.JSON(consts.StatusOK, utils.H{"Message": err.Error()})
	}
	client, err := genericclient.NewClient("StudentService", g, opts...)
	x := c.GetRequest()
	y, _ := adaptor.GetCompatRequest(x)
	z, _ := generic.FromHTTPRequest(y)
	response, err := client.GenericCall(ctx, "", z)
	resp := (response.(*generic.HTTPResponse)).Body
	//client := studentservice.MustNewClient("StudentService", opts...)
	//kreq := student2.QueryReq{req.ID}
	//resp, err := client.Query(ctx, &kreq)

	//resp := new(student.Student)
	if err != nil {
		c.JSON(consts.StatusOK, utils.H{"Message": err.Error()})
		return
	}

	c.JSON(consts.StatusOK, resp)
}
